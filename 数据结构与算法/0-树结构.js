// 树 树形结构

// 1 线性结构是一对一的关系
// 2 树形结构是一对多的关系 较明显的递归特性
// 3 与链表类似 是一种递归的数据结构

/**
 * 节点
 * 存储数据信息
 * 存储与其他节点关系
 * 有n个节点 n-1条边
 * 前驱和后继
 */

/**
 * 节点的度
 * 就是结点索引处分支的个数 (指的是分支)
 */

/**
 * 度为0的节点
 * 称为叶节点或终端节点
 * 不为0的节点
 * 称为分支节点或非终端节点
 */
/**
 * 叶子节点
 * 度为零的节点
 */

// 除了根节点外 其余都为内部节点

/**
 * 树的度
 * 这课树中所有结点的最大分支个数
 */

/**
 * 树的高度
 * 为树的层数(看题目会把根节点设为几)
 */

/**
 * 子树
 * 后续节点形成是树(不包括根节点)
 */

/**
 * 邻居节点 兄弟节点
 * 为相邻的节点
 */

/**
 * 路径
 * 看是否能达到
 * 路径长度等于路径上的节点个数减一
 */

/**
 * 森林
 * m颗互不相交的树的集合
 */


/**
 * 双亲
 * 孩子
 */


// js的Dom就是树结构

/**
 * 树的分类
 * 二叉树: 每个节点最多有两个子节点
 * 三叉树
 * 多叉树 如字典树
 */

// 完全二叉树:每层节点必须有两个子节点 但最后一层除外 且最后一层空缺的节点必须在右边 左边必须填满 (满二叉树从右往左删除)
// 满二叉树: 每个节点要么有两个子节点 要么没有子节点
// 完美二叉树: 每个节点都有两个子节点
// 平衡二叉树: 左右两边看起来一样 左右子树每个节点的高度差都不大于一
// 二叉搜索树: 左子节点的值小于等于节点值小于右子节点值(注意是值) 并且左子节点的值都小于等于该节点的值 右反之
// 自平衡二叉搜索树: 如红黑树 ALV树 