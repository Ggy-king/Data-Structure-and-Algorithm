// 红黑树  -- 自平衡二叉查找树

// 其节点被标记为黑色或红色

/**
 * 1 根节点是黑色的 叶节点是不存储数据的黑色空节点
 * 2 任何相邻的两个节点(父子)不能同时为红色
 * 3 任意节点到其可到达的叶子节点间包含相同数量的黑色节点
 */

// 有n个节点的红黑树
// 高度: 最多为2log(n+1)

//// 频繁插入 频繁删除的数据集合红黑树更具有优势  较稳定



// 插入
/**
 * 1 插入为根节点 则直接变黑
 * 2 插入为红叶 看父亲的兄弟
 *      若父亲的兄弟为红 则对上三角进行全部颜色取反(如果涉及到根节点 别忘了根节点一定是黑色的)
 *      若父亲的兄弟为黑 则向上的三个节点(必须是冲突的)重组为上三角 且满足黑根红叶(注意把中间值向上提为黑色 剩下为红 截肢后的剩下数字左给左 右给右)
 * 
 */