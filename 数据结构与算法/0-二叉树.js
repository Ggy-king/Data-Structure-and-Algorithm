// 求完全二叉树的高度
// h = log2(n+1) 的向上取整

// 一  总分支数 = 总节点数 - 1
// 二  叶子节点数 = 双分支节点数 + 1


// 存储结构
/*
1 顺序存储结构 按顺序排列下去 简单但只适合完全二叉树 具有局限性
2 链式存储结构 (1 以顺序表的形式排列并链式下去 2 直接仿着二叉树的图形链式下去 -> 也称为二叉链表存储结构)

二叉链表存储结构
*/

// 树与二叉树的转换
//// 树 -> 二叉树
// 1 连接兄弟节点
// 2 删除多余父与子间的分支 即同一兄弟间与父只保留一条线
// 3 调整一下位置 使其看起来跟像二叉树

//// 二叉树 -> 树
// 反过来即可

// 深林与二叉树的转换
// 将根节点连起来 再按照树转换二叉树




// 二叉树遍历
// 层次遍历(广度优先遍历) : 从上到下 从左到右 依次  一层一层的


// 深度优先遍历(先序 中序 后序)  不是一层一层的
/*
1 沿着从上至下 从左至右 但是先在最左侧从上一直到下这么走
2 走过的点不在记录
3 每个节点必定会指向三次
*/
/*
先序: 第一次到某个节点时访问，所得序列为先序遍历序列   根左右
中序: 第二次到某个节点时访问，所得序列为中序遍历序列   左根右
后序: 第三次到某个节点时访问，所得序列为后序遍历序列   左右根
*/

// 补充 深林和树的深度遍历是没有中序遍历的 层次遍历与二叉树一样
// 补充 若二叉树由树转化而来 则二叉先序等于树先序 二叉中序等于树后序
